<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/ads/googleads/v3/resources/currency_constant.proto

namespace Google\Ads\GoogleAds\V3\Resources;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A currency constant.
 *
 * Generated from protobuf message <code>google.ads.googleads.v3.resources.CurrencyConstant</code>
 */
class CurrencyConstant extends \Google\Protobuf\Internal\Message
{
    /**
     * The resource name of the currency constant.
     * Currency constant resource names have the form:
     * `currencyConstants/{currency_code}`
     *
     * Generated from protobuf field <code>string resource_name = 1;</code>
     */
    protected $resource_name = '';
    /**
     * ISO 4217 three-letter currency code, e.g. "USD"
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue code = 2;</code>
     */
    protected $code = null;
    /**
     * Full English name of the currency.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue name = 3;</code>
     */
    protected $name = null;
    /**
     * Standard symbol for describing this currency, e.g. '$' for US Dollars.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue symbol = 4;</code>
     */
    protected $symbol = null;
    /**
     * The billable unit for this currency. Billed amounts should be multiples of
     * this value.
     *
     * Generated from protobuf field <code>.google.protobuf.Int64Value billable_unit_micros = 5;</code>
     */
    protected $billable_unit_micros = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $resource_name
     *           The resource name of the currency constant.
     *           Currency constant resource names have the form:
     *           `currencyConstants/{currency_code}`
     *     @type \Google\Protobuf\StringValue $code
     *           ISO 4217 three-letter currency code, e.g. "USD"
     *     @type \Google\Protobuf\StringValue $name
     *           Full English name of the currency.
     *     @type \Google\Protobuf\StringValue $symbol
     *           Standard symbol for describing this currency, e.g. '$' for US Dollars.
     *     @type \Google\Protobuf\Int64Value $billable_unit_micros
     *           The billable unit for this currency. Billed amounts should be multiples of
     *           this value.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Ads\GoogleAds\V3\Resources\CurrencyConstant::initOnce();
        parent::__construct($data);
    }

    /**
     * The resource name of the currency constant.
     * Currency constant resource names have the form:
     * `currencyConstants/{currency_code}`
     *
     * Generated from protobuf field <code>string resource_name = 1;</code>
     * @return string
     */
    public function getResourceName()
    {
        return $this->resource_name;
    }

    /**
     * The resource name of the currency constant.
     * Currency constant resource names have the form:
     * `currencyConstants/{currency_code}`
     *
     * Generated from protobuf field <code>string resource_name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setResourceName($var)
    {
        GPBUtil::checkString($var, True);
        $this->resource_name = $var;

        return $this;
    }

    /**
     * ISO 4217 three-letter currency code, e.g. "USD"
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue code = 2;</code>
     * @return \Google\Protobuf\StringValue
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Returns the unboxed value from <code>getCode()</code>

     * ISO 4217 three-letter currency code, e.g. "USD"
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue code = 2;</code>
     * @return string|null
     */
    public function getCodeUnwrapped()
    {
        return $this->readWrapperValue("code");
    }

    /**
     * ISO 4217 three-letter currency code, e.g. "USD"
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue code = 2;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setCode($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->code = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\StringValue object.

     * ISO 4217 three-letter currency code, e.g. "USD"
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue code = 2;</code>
     * @param string|null $var
     * @return $this
     */
    public function setCodeUnwrapped($var)
    {
        $this->writeWrapperValue("code", $var);
        return $this;}

    /**
     * Full English name of the currency.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue name = 3;</code>
     * @return \Google\Protobuf\StringValue
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Returns the unboxed value from <code>getName()</code>

     * Full English name of the currency.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue name = 3;</code>
     * @return string|null
     */
    public function getNameUnwrapped()
    {
        return $this->readWrapperValue("name");
    }

    /**
     * Full English name of the currency.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue name = 3;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->name = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\StringValue object.

     * Full English name of the currency.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue name = 3;</code>
     * @param string|null $var
     * @return $this
     */
    public function setNameUnwrapped($var)
    {
        $this->writeWrapperValue("name", $var);
        return $this;}

    /**
     * Standard symbol for describing this currency, e.g. '$' for US Dollars.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue symbol = 4;</code>
     * @return \Google\Protobuf\StringValue
     */
    public function getSymbol()
    {
        return $this->symbol;
    }

    /**
     * Returns the unboxed value from <code>getSymbol()</code>

     * Standard symbol for describing this currency, e.g. '$' for US Dollars.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue symbol = 4;</code>
     * @return string|null
     */
    public function getSymbolUnwrapped()
    {
        return $this->readWrapperValue("symbol");
    }

    /**
     * Standard symbol for describing this currency, e.g. '$' for US Dollars.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue symbol = 4;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setSymbol($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->symbol = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\StringValue object.

     * Standard symbol for describing this currency, e.g. '$' for US Dollars.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue symbol = 4;</code>
     * @param string|null $var
     * @return $this
     */
    public function setSymbolUnwrapped($var)
    {
        $this->writeWrapperValue("symbol", $var);
        return $this;}

    /**
     * The billable unit for this currency. Billed amounts should be multiples of
     * this value.
     *
     * Generated from protobuf field <code>.google.protobuf.Int64Value billable_unit_micros = 5;</code>
     * @return \Google\Protobuf\Int64Value
     */
    public function getBillableUnitMicros()
    {
        return $this->billable_unit_micros;
    }

    /**
     * Returns the unboxed value from <code>getBillableUnitMicros()</code>

     * The billable unit for this currency. Billed amounts should be multiples of
     * this value.
     *
     * Generated from protobuf field <code>.google.protobuf.Int64Value billable_unit_micros = 5;</code>
     * @return int|string|null
     */
    public function getBillableUnitMicrosUnwrapped()
    {
        return $this->readWrapperValue("billable_unit_micros");
    }

    /**
     * The billable unit for this currency. Billed amounts should be multiples of
     * this value.
     *
     * Generated from protobuf field <code>.google.protobuf.Int64Value billable_unit_micros = 5;</code>
     * @param \Google\Protobuf\Int64Value $var
     * @return $this
     */
    public function setBillableUnitMicros($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Int64Value::class);
        $this->billable_unit_micros = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\Int64Value object.

     * The billable unit for this currency. Billed amounts should be multiples of
     * this value.
     *
     * Generated from protobuf field <code>.google.protobuf.Int64Value billable_unit_micros = 5;</code>
     * @param int|string|null $var
     * @return $this
     */
    public function setBillableUnitMicrosUnwrapped($var)
    {
        $this->writeWrapperValue("billable_unit_micros", $var);
        return $this;}

}

